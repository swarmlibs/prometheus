# yaml-language-server: $schema=https://json.schemastore.org/prometheus.json
#
# The scrape config for probing services via the Blackbox Exporter.
#
# The relabeling allows the actual service scrape endpoint to be configured
# for all or only some services.
# 
# Annotations:
# io.prometheus.probe_enabled=<true|false>
# io.prometheus.probe_disabled=<true|false>
# 
# io.prometheus.dockerswarm-services.should_be_probed=<true|false>
scrape_configs:

  - job_name: 'dockerswarm/services-endpoints/nodeport'

    metrics_path: /probe
    params:
      module: [tcp_connect]

    dockerswarm_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 10s
        role: tasks
        filters:
          - name: desired-state
            values: [ running ]

    relabel_configs:

      # ================================================================================
      # Add custom labels
      # ================================================================================
      - target_label: module
        replacement: tcp_connect

      # ================================================================================
      # Keep or drop targets with the following rules
      # ================================================================================

      # io.prometheus.dockerswarm-services.should_be_probed=<true|false>
      - source_labels:
        - __meta_dockerswarm_service_label_io_prometheus_dockerswarm_services_should_be_probed
        regex: 'false'
        action: drop

      # io.prometheus.probe_enabled=<true|false>
      - source_labels:
        - __meta_dockerswarm_service_label_io_prometheus_probe_enabled
        regex: 'false'
        action: drop
      # io.prometheus.probe_disabled=<true|false>
      - source_labels:
        - __meta_dockerswarm_service_label_io_prometheus_probe_disabled
        regex: 'true'
        action: drop

      # Keep only services connected to the "host" network
      - source_labels:
        - __meta_dockerswarm_task_port_publish_mode
        regex: 'host'
        action: keep

      # Drop any tasks that connected to one or more networks
      # Since we are only interested in the "host" network
      - source_labels:
        - __meta_dockerswarm_network_name
        regex: (.+)
        action: drop

      # ================================================================================
      # Override prometheus internal labels to configure blackbox
      # ================================================================================
      - source_labels: [__address__]
        target_label: __param_target
      - target_label: __address__
        replacement: blackbox-exporter.svc.cluster.local:9115
      - source_labels: [__param_target]
        target_label: instance

      # Drop all labels starting with "io.prometheus."
      - action: labeldrop
        regex: __meta_(dockerswarm_service_label_io_prometheus_.+)

      # ================================================================================
      # Override prometheus internal labels
      # ================================================================================

      # If service is replicated, set "job_id" label to "<job>/<service_name>/<task_slot>"
      - source_labels:
        - job
        - __meta_dockerswarm_service_mode
        - __meta_dockerswarm_service_name
        - __meta_dockerswarm_task_slot
        target_label: id
        separator: '/'
        regex: (.*\/replicated\/.+\/.+)
      # If service is global, set "job_id" label to "<job>/<service_name>/<node_id>"
      - source_labels:
        - job
        - __meta_dockerswarm_service_mode
        - __meta_dockerswarm_service_name
        - __meta_dockerswarm_node_id
        target_label: id
        separator: '/'
        regex: (.*\/global\/.+\/.+)

      # Override "job" label to Docker Swarm's Service Name combined with "namespace" labels
      # e.g. <com.docker.stack.namespace>/<io.prometheus.job_name>
      - source_labels:
        - __meta_dockerswarm_service_label_com_docker_stack_namespace
        - __meta_dockerswarm_service_label_io_prometheus_job_name
        target_label: job
        separator: /

      # Drop all labels starting with "io.prometheus."
      - action: labeldrop
        regex: __meta_(dockerswarm_service_label_io_prometheus_.+)

      # ================================================================================
      # Label mapping
      # ================================================================================

      - action: labelmap
        regex: __meta_dockerswarm_service_label_com_(docker_stack_.+)
      - action: labelmap
        regex: __meta_(dockerswarm_node_.+)
      - action: labelmap
        regex: __meta_(dockerswarm_service_.+)
      - action: labelmap
        regex: __meta_(dockerswarm_task_.+)

      # Drop extra labels
      - action: labeldrop
        regex: dockerswarm_service_label_com_(docker_stack_.+)

      # ================================================================================
      # Docker Swarm compatible relabeling
      # - dockerswarm_task_name
      # ================================================================================

      # Fix "__meta_dockerswarm_task_slot" label for global tasks
      - source_labels:
        - __meta_dockerswarm_service_mode
        - __meta_dockerswarm_node_id
        target_label: __meta_dockerswarm_task_slot
        separator: '/'
        regex: global\/(.*)

      # Set "task" label to "<service_name>_<task_slot>"
      - source_labels:
        - __meta_dockerswarm_service_name
        - __meta_dockerswarm_task_slot
        target_label: task
        separator: '.'

      # Set "dockerswarm_task_name" label to "<service_name>.<task_slot>.<task_id>"
      - source_labels:
        - __meta_dockerswarm_service_name
        - __meta_dockerswarm_task_slot
        - __meta_dockerswarm_task_id
        target_label: dockerswarm_task_name
        separator: '.'

      # ================================================================================
      # Kubernetes compatible relabeling
      # - namespace
      # - deployment
      # - pod
      # ================================================================================

      # Set Kubernetes's Namespace with "com.docker.stack.namespace" label
      - source_labels:
        - __meta_dockerswarm_service_label_com_docker_stack_namespace
        target_label: namespace

      # Set Kubernetes's Deployment with "com.docker.stack.namespace" label
      - source_labels:
        - __meta_dockerswarm_service_name
        target_label: deployment

      # Set Kubernetes's Pod Name with Docker Swarm's Service Name
      - source_labels:
        - dockerswarm_task_name
        target_label: pod
